# Script de Atualiza√ß√£o - Sistema de Motores
# PowerShell Version - Atualiza√ß√£o em Produ√ß√£o
# Autor: Sistema de Relat√≥rios
# Data: $(Get-Date)

Write-Host "===========================================" -ForegroundColor Cyan
Write-Host "üîÑ ATUALIZA√á√ÉO - Sistema de Motores" -ForegroundColor Green
Write-Host "üåê Produ√ß√£o - Atualiza√ß√£o Segura" -ForegroundColor Yellow
Write-Host "===========================================" -ForegroundColor Cyan

function Write-Log {
    param($Message)
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor Green
}

function Write-Error-Log {
    param($Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

function Write-Warning-Log {
    param($Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Info {
    param($Message)
    Write-Host "[INFO] $Message" -ForegroundColor Cyan
}

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "artisan")) {
    Write-Error-Log "Arquivo artisan n√£o encontrado. Execute este script no diret√≥rio raiz do Laravel."
    exit 1
}

Write-Log "Iniciando atualiza√ß√£o do sistema de motores..."

# 1. Backup das configura√ß√µes atuais
Write-Log "1. Criando backup das configura√ß√µes..."
if (Test-Path ".env") {
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    Copy-Item ".env" ".env.backup.$timestamp"
    Write-Log "Backup do .env criado"
}

# 2. Verificar se √© ambiente de produ√ß√£o
Write-Log "2. Verificando ambiente..."
$envContent = Get-Content ".env" -Raw
if ($envContent -match "APP_ENV=production") {
    Write-Log "‚úÖ Ambiente de produ√ß√£o detectado"
} else {
    Write-Warning-Log "‚ö†Ô∏è  ATEN√á√ÉO: Este n√£o parece ser um ambiente de produ√ß√£o!"
    Write-Warning-Log "   Verifique se APP_ENV=production no .env"
    $response = Read-Host "Continuar mesmo assim? (y/n)"
    if ($response -ne "y" -and $response -ne "Y") {
        exit 1
    }
}

# 3. Backup do banco de dados (recomendado)
Write-Log "3. Backup do banco de dados..."
Write-Warning-Log "‚ö†Ô∏è  IMPORTANTE: Fa√ßa backup do banco antes de continuar!"
Write-Host "   Comando sugerido: mysqldump -u [usuario] -p [banco] > backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').sql"
Write-Host ""
$backupResponse = Read-Host "Backup do banco realizado? (y/n)"
if ($backupResponse -ne "y" -and $backupResponse -ne "Y") {
    Write-Warning-Log "Recomendamos fazer backup antes de continuar"
    $continueResponse = Read-Host "Continuar mesmo assim? (y/n)"
    if ($continueResponse -ne "y" -and $continueResponse -ne "Y") {
        exit 1
    }
}

# 4. Atualizar c√≥digo (se usando git)
Write-Log "4. Atualizando c√≥digo..."
if (Test-Path ".git") {
    Write-Log "   - Verificando atualiza√ß√µes do Git..."
    git fetch origin
    $currentBranch = git branch --show-current
    Write-Log "   - Branch atual: $currentBranch"
    
    $pullResponse = Read-Host "Fazer pull das √∫ltimas altera√ß√µes? (y/n)"
    if ($pullResponse -eq "y" -or $pullResponse -eq "Y") {
        git pull origin $currentBranch
        Write-Log "   - C√≥digo atualizado"
    }
} else {
    Write-Warning-Log "Git n√£o encontrado. Certifique-se de que os arquivos est√£o atualizados."
}

# 5. Instalar/atualizar depend√™ncias
Write-Log "5. Atualizando depend√™ncias..."
Write-Log "   - Depend√™ncias PHP..."
composer install --optimize-autoloader --no-dev

Write-Log "   - Depend√™ncias Node.js..."
if (Get-Command npm -ErrorAction SilentlyContinue) {
    npm ci
    Write-Log "   - Assets compilados..."
    npm run build
} else {
    Write-Warning-Log "NPM n√£o encontrado. Compile os assets manualmente: npm run build"
}

# 6. Executar migra√ß√µes espec√≠ficas do sistema de motores
Write-Log "6. Executando migra√ß√µes do sistema de motores..."
Write-Log "   - Verificando status das migra√ß√µes..."

# Lista de migra√ß√µes espec√≠ficas do sistema de motores
$motorMigrations = @(
    "2024_01_01_000000_create_motores_table",
    "2024_01_01_000001_create_relatorio_motor_table", 
    "2025_07_17_204222_update_motores_table_structure",
    "2025_07_17_205503_update_motores_local_reserva_fields"
)

foreach ($migration in $motorMigrations) {
    Write-Log "   - Verificando: $migration"
}

$migrateResponse = Read-Host "Executar migra√ß√µes do sistema de motores? (y/n)"
if ($migrateResponse -eq "y" -or $migrateResponse -eq "Y") {
    Write-Log "   - Executando migra√ß√µes..."
    php artisan migrate --force
    Write-Log "   - Migra√ß√µes executadas"
}

# 7. Limpar e recriar caches
Write-Log "7. Otimizando caches..."
Write-Log "   - Limpando caches antigos..."
php artisan cache:clear
php artisan config:clear
php artisan route:clear
php artisan view:clear

Write-Log "   - Recriando caches otimizados..."
php artisan config:cache
php artisan route:cache
php artisan view:cache

# 8. Verificar estrutura de diret√≥rios
Write-Log "8. Verificando estrutura..."
New-Item -ItemType Directory -Force -Path "storage\app\public\motores" | Out-Null
Write-Log "   - Diret√≥rio de motores criado/verificado"

# 9. Verifica√ß√µes finais
Write-Log "9. Verifica√ß√µes finais..."

# Verificar se os arquivos principais existem
$requiredFiles = @(
    "app\Models\Motor.php",
    "app\Http\Controllers\MotorController.php",
    "resources\js\Pages\Motores\Index.vue",
    "resources\js\Pages\Motores\Create.vue",
    "resources\js\Pages\Motores\Edit.vue",
    "resources\js\Pages\Motores\Show.vue"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Log "   ‚úÖ $file"
    } else {
        Write-Error-Log "   ‚ùå $file - ARQUIVO N√ÉO ENCONTRADO!"
    }
}

# 10. Informa√ß√µes do sistema
Write-Log "10. Informa√ß√µes do sistema:"
$appName = (Select-String -Path ".env" -Pattern "APP_NAME=(.+)").Matches[0].Groups[1].Value
$version = (Select-String -Path ".env" -Pattern "APP_VERSION=(.+)").Matches[0].Groups[1].Value
$environment = (Select-String -Path ".env" -Pattern "APP_ENV=(.+)").Matches[0].Groups[1].Value

Write-Host "    üì± Nome: $appName" -ForegroundColor White
Write-Host "    üî¢ Vers√£o: $version" -ForegroundColor White
Write-Host "    üåç Ambiente: $environment" -ForegroundColor White
Write-Host "    üöó Sistema de Motores: ATIVO" -ForegroundColor Green

Write-Host ""
Write-Host "===========================================" -ForegroundColor Cyan
Write-Log "‚úÖ ATUALIZA√á√ÉO DO SISTEMA DE MOTORES CONCLU√çDA!"
Write-Host "===========================================" -ForegroundColor Cyan
Write-Host ""

Write-Info "üß™ Testes recomendados:"
Write-Host "   1. Acessar: /motores (listagem)"
Write-Host "   2. Criar um motor de teste"
Write-Host "   3. Editar um motor"
Write-Host "   4. Testar filtros e busca"
Write-Host "   5. Verificar responsividade mobile"
Write-Host ""

Write-Info "üîß Comandos √∫teis para manuten√ß√£o:"
Write-Host "   - Ver logs: Get-Content storage\logs\laravel.log -Tail 50"
Write-Host "   - Limpar cache: php artisan cache:clear"
Write-Host "   - Status migra√ß√µes: php artisan migrate:status"
Write-Host ""

Write-Warning-Log "‚ö†Ô∏è  Lembre-se de:"
Write-Host "   - Testar todas as funcionalidades"
Write-Host "   - Verificar se n√£o quebrou nada existente"
Write-Host "   - Monitorar logs de erro nas pr√≥ximas horas"
Write-Host ""

Write-Log "Atualiza√ß√£o finalizada! Sistema de motores ativo. üöó" 