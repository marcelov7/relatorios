<?php
/**
 * Script de Corre√ß√£o Autom√°tica - Sistema de Imagens CloudPanel
 * Execute: php fix_images_cloudpanel.php
 */

echo "üîß === CORRE√á√ÉO AUTOM√ÅTICA - SISTEMA DE IMAGENS ===\n\n";

$correcoes = [];
$erros = [];

// 1. Criar diret√≥rios necess√°rios
echo "üìÅ 1. Criando diret√≥rios necess√°rios...\n";

$diretoriosNecessarios = [
    'storage/app/public/relatorios',
    'storage/app/public/relatorios/thumbs',
    'storage/app/public/atualizacoes',
    'public/storage/relatorios',
    'public/storage/relatorios/thumbs',
    'public/storage/atualizacoes'
];

foreach ($diretoriosNecessarios as $dir) {
    if (!is_dir($dir)) {
        if (mkdir($dir, 0775, true)) {
            echo "   ‚úÖ Criado: {$dir}\n";
            $correcoes[] = "Diret√≥rio criado: {$dir}";
        } else {
            echo "   ‚ùå Erro ao criar: {$dir}\n";
            $erros[] = "N√£o foi poss√≠vel criar: {$dir}";
        }
    } else {
        echo "   ‚ÑπÔ∏è  J√° existe: {$dir}\n";
    }
}

// 2. Ajustar permiss√µes
echo "\nüîê 2. Ajustando permiss√µes...\n";

$diretoriosPermissoes = [
    'storage/app/public',
    'storage/app/public/relatorios',
    'storage/app/public/relatorios/thumbs',
    'storage/app/public/atualizacoes'
];

foreach ($diretoriosPermissoes as $dir) {
    if (is_dir($dir)) {
        if (chmod($dir, 0775)) {
            echo "   ‚úÖ Permiss√µes ajustadas: {$dir}\n";
            $correcoes[] = "Permiss√µes ajustadas: {$dir}";
        } else {
            echo "   ‚ö†Ô∏è  Erro ao ajustar permiss√µes: {$dir}\n";
            $erros[] = "Erro ao ajustar permiss√µes: {$dir}";
        }
    }
}

// 3. Verificar/criar link simb√≥lico
echo "\nüîó 3. Verificando link simb√≥lico...\n";

if (!is_link('public/storage')) {
    // Remover se for diret√≥rio comum
    if (is_dir('public/storage') && !is_link('public/storage')) {
        echo "   üóëÔ∏è  Removendo diret√≥rio conflitante...\n";
        rmdir('public/storage');
    }
    
    $target = realpath('storage/app/public');
    if (symlink($target, 'public/storage')) {
        echo "   ‚úÖ Link simb√≥lico criado: public/storage -> {$target}\n";
        $correcoes[] = "Link simb√≥lico criado";
    } else {
        echo "   ‚ùå Erro ao criar link simb√≥lico\n";
        $erros[] = "Erro ao criar link simb√≥lico";
    }
} else {
    echo "   ‚ÑπÔ∏è  Link simb√≥lico j√° existe\n";
}

// 4. Sincronizar imagens existentes
echo "\nüîÑ 4. Sincronizando imagens existentes...\n";

$origemDir = 'storage/app/public/relatorios';
$destinoDir = 'public/storage/relatorios';

if (is_dir($origemDir) && is_dir($destinoDir)) {
    $imagens = glob($origemDir . '/*.{jpg,jpeg,png,gif}', GLOB_BRACE);
    $imagensSincronizadas = 0;
    
    foreach ($imagens as $imagemOrigem) {
        $nomeArquivo = basename($imagemOrigem);
        $imagemDestino = $destinoDir . '/' . $nomeArquivo;
        
        if (!file_exists($imagemDestino)) {
            if (copy($imagemOrigem, $imagemDestino)) {
                $imagensSincronizadas++;
            }
        }
    }
    
    // Sincronizar thumbnails
    $thumbsOrigem = $origemDir . '/thumbs';
    $thumbsDestino = $destinoDir . '/thumbs';
    
    if (is_dir($thumbsOrigem) && is_dir($thumbsDestino)) {
        $thumbs = glob($thumbsOrigem . '/*.{jpg,jpeg,png,gif}', GLOB_BRACE);
        
        foreach ($thumbs as $thumbOrigem) {
            $nomeArquivo = basename($thumbOrigem);
            $thumbDestino = $thumbsDestino . '/' . $nomeArquivo;
            
            if (!file_exists($thumbDestino)) {
                if (copy($thumbOrigem, $thumbDestino)) {
                    $imagensSincronizadas++;
                }
            }
        }
    }
    
    if ($imagensSincronizadas > 0) {
        echo "   ‚úÖ {$imagensSincronizadas} imagens sincronizadas\n";
        $correcoes[] = "{$imagensSincronizadas} imagens sincronizadas";
    } else {
        echo "   ‚ÑπÔ∏è  Todas as imagens j√° est√£o sincronizadas\n";
    }
} else {
    echo "   ‚ö†Ô∏è  Diret√≥rios de origem ou destino n√£o encontrados\n";
}

// 5. Criar arquivo .htaccess para uploads (se n√£o existir)
echo "\nüìÑ 5. Verificando arquivo .htaccess...\n";

$htaccessPublic = 'public/.htaccess';
$htaccessContent = <<<EOT
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>

# Configura√ß√µes para uploads
<IfModule mod_php.c>
    php_value upload_max_filesize 20M
    php_value post_max_size 20M
    php_value max_execution_time 300
    php_value memory_limit 256M
</IfModule>
EOT;

if (!file_exists($htaccessPublic)) {
    if (file_put_contents($htaccessPublic, $htaccessContent)) {
        echo "   ‚úÖ Arquivo .htaccess criado\n";
        $correcoes[] = "Arquivo .htaccess criado";
    } else {
        echo "   ‚ùå Erro ao criar .htaccess\n";
        $erros[] = "Erro ao criar .htaccess";
    }
} else {
    echo "   ‚ÑπÔ∏è  Arquivo .htaccess j√° existe\n";
}

// 6. Testar cria√ß√£o de arquivo
echo "\nüß™ 6. Testando sistema de arquivos...\n";

$testFile = 'storage/app/public/test_system.txt';
$testContent = 'Teste do sistema - ' . date('Y-m-d H:i:s');

if (file_put_contents($testFile, $testContent)) {
    echo "   ‚úÖ Sistema de arquivos funcionando\n";
    
    // Testar sincroniza√ß√£o
    $testPublic = 'public/storage/test_system.txt';
    if (copy($testFile, $testPublic)) {
        echo "   ‚úÖ Sincroniza√ß√£o funcionando\n";
        unlink($testPublic);
    } else {
        echo "   ‚ö†Ô∏è  Erro na sincroniza√ß√£o\n";
        $erros[] = "Erro na sincroniza√ß√£o de arquivos";
    }
    
    unlink($testFile);
} else {
    echo "   ‚ùå Erro no sistema de arquivos\n";
    $erros[] = "Sistema de arquivos com problemas";
}

// 7. Verificar configura√ß√µes cr√≠ticas
echo "\n‚öôÔ∏è 7. Verificando configura√ß√µes cr√≠ticas...\n";

// Verificar extens√£o GD
if (extension_loaded('gd')) {
    echo "   ‚úÖ Extens√£o GD dispon√≠vel\n";
} else {
    echo "   ‚ùå Extens√£o GD n√£o encontrada\n";
    $erros[] = "Extens√£o GD n√£o instalada";
}

// Verificar fileinfo
if (extension_loaded('fileinfo')) {
    echo "   ‚úÖ Extens√£o fileinfo dispon√≠vel\n";
} else {
    echo "   ‚ùå Extens√£o fileinfo n√£o encontrada\n";
    $erros[] = "Extens√£o fileinfo n√£o instalada";
}

// Resumo final
echo "\n" . str_repeat("=", 60) . "\n";
echo "üìã RESUMO DA CORRE√á√ÉO\n";
echo str_repeat("=", 60) . "\n";

if (!empty($correcoes)) {
    echo "‚úÖ CORRE√á√ïES APLICADAS:\n\n";
    foreach ($correcoes as $i => $correcao) {
        echo "   " . ($i + 1) . ". {$correcao}\n";
    }
}

if (!empty($erros)) {
    echo "\n‚ùå PROBLEMAS QUE PRECISAM DE ATEN√á√ÉO MANUAL:\n\n";
    foreach ($erros as $i => $erro) {
        echo "   " . ($i + 1) . ". {$erro}\n";
    }
    
    echo "\nüîß COMANDOS ADICIONAIS NECESS√ÅRIOS:\n\n";
    
    if (in_array('Extens√£o GD n√£o instalada', $erros)) {
        echo "   # Instalar extens√£o GD (Ubuntu/Debian)\n";
        echo "   sudo apt-get install php-gd\n";
        echo "   sudo systemctl restart apache2  # ou nginx\n\n";
    }
    
    if (strpos(implode(' ', $erros), 'permiss√µes') !== false) {
        echo "   # Ajustar propriedade dos arquivos (como root)\n";
        echo "   sudo chown -R www-data:www-data storage/\n";
        echo "   sudo chown -R www-data:www-data public/storage/\n\n";
    }
}

echo "\nüöÄ PR√ìXIMOS PASSOS:\n";
echo "   1. Execute: php artisan storage:link\n";
echo "   2. Teste upload via interface web\n";
echo "   3. Verifique logs: tail -f storage/logs/laravel.log\n";
echo "   4. Execute verifica√ß√£o: php check_images_cloudpanel.php\n\n";

if (empty($erros)) {
    echo "üéâ SISTEMA CORRIGIDO! Pronto para uploads no CloudPanel.\n";
} else {
    echo "‚ö†Ô∏è  CORRE√á√ïES PARCIAIS. Verifique os problemas manuais acima.\n";
}

echo "\n‚úÖ Corre√ß√£o conclu√≠da!\n";
